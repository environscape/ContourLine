#include "DisplayLED.h"
#include "CL_const.h"

#include <MozziGuts.h>
#include <Oscil.h>  // oscillator template
#include <LowPassFilter.h>
#include <ADSR.h>

#include <tables/sin256_int8.h>  // sine table for oscillator
#include <tables/triangle_analogue512_int8.h>
#include <tables/square_no_alias512_int8.h>
#include <tables/saw256_int8.h>
#include <tables/phasor256_int8.h>
#include <tables/halfsin256_uint8.h>
#include <tables/waveshape_chebyshev_4th_256_int8.h>
#include <tables/whitenoise8192_int8.h>

#define KNOB_CHANGE_RANGE 50  //旋钮若改变在范围内才允许改变当前参数
#define KNOB_MAX_RANGE 1024   //旋钮最大值
#define FUNCTION_LENGTH 10    //总菜单数
#define CONTROL_RATE 64       //控制速率
//V.oct table

String function[FUNCTION_LENGTH] = {
  "Wave", "Shape", "Pitch", "Vol", "Cutof", "Reso.", "Attk.", "Decay", "Sus.", "Rel.",
  // "L1F", "L1A", "L1Wav", "L1Pit", "L1Vol", "L1Cut", "L1Res"  //function[10]
};
int value[FUNCTION_LENGTH] = {
  0,
  0,
  440,
  512,
  1000,
  100,
  5,
  127,
  256,
  5,
  // 5,  //L1F
  // 0,
  // 0,
  // 0,
  // 0,
  // 0,
  // 0,
};  // 给部分数组元素赋值
// bool* ledGroup[FUNCTION_LENGTH] = { Led_W, Led_S, Led_P, Led_V, Led_C, Led_R, Led_A, Led_D, Led_S, Led_R };
// bool* ledGroup[FUNCTION_LENGTH] = { Led_1, Led_2, Led_3, Led_4, Led_5, Led_6, Led_7, Led_8, Led_9, Led_0 };
bool* ledGroup[FUNCTION_LENGTH] = { Led_A, Led_B, Led_C, Led_D, Led_E, Led_F, Led_G, Led_H, Led_I, Led_J };
int position = 0;

Oscil<SIN256_NUM_CELLS, AUDIO_RATE> aSin(SIN256_DATA);
Oscil<TRIANGLE_ANALOGUE512_NUM_CELLS, AUDIO_RATE> aTra(TRIANGLE_ANALOGUE512_DATA);
Oscil<SQUARE_NO_ALIAS512_NUM_CELLS, AUDIO_RATE> aSqu(SQUARE_NO_ALIAS512_DATA);
Oscil<SAW256_NUM_CELLS, AUDIO_RATE> aSaw(SAW256_DATA);
Oscil<PHASOR256_NUM_CELLS, AUDIO_RATE> aPha(PHASOR256_DATA);
Oscil<HALFSIN256_NUM_CELLS, AUDIO_RATE> aHSin(HALFSIN256_DATA);
Oscil<CHEBYSHEV_4TH_256_NUM_CELLS, AUDIO_RATE> aCheb(CHEBYSHEV_4TH_256_DATA);
Oscil<WHITENOISE8192_NUM_CELLS, AUDIO_RATE> aNos(WHITENOISE8192_DATA);

Oscil<SIN256_NUM_CELLS, CONTROL_RATE> lfo(SIN256_DATA);

ADSR<AUDIO_RATE, AUDIO_RATE> envelope;
LowPassFilter lpf;

void setup() {
  Serial.begin(115200);  // 使用Serial.begin()函数来初始化串口波特率,参数为要设置的波特率

  initLED();//初始化led

  pinMode(12, INPUT_PULLUP);  //将12引脚自动上拉电阻
  pinMode(11, INPUT_PULLUP);  //将13引脚自动上拉电阻

  startMozzi(CONTROL_RATE);  // :)
}

int Wave = 0;
int Pitch = 0;
int Vol = 0;
int Cutof = 0;
int Reso = 0;
int L1F = 0;
int L1A = 0;
int L1Wav = 0;
int L1Pit = 0;
int L1Vol = 0;
int L1Cut = 0;
int L1Res = 0;

void updateControl() {
  //display
  // diplayLED(Led_2);
  //用以展示控制
  getCtrl();
  displayLED(ledGroup[position]);

  //在这里修改参数 先做运算 再设置配置
  Wave = value[0] >> 7;  //波表  将1023分成8个波表类型
  Pitch = value[2];
  Vol = value[3] >> 3;
  Cutof = value[4] >> 2;
  Reso = value[5] >> 2;
  lpf.setCutoffFreq(Cutof);
  lpf.setResonance(Reso);

  lfo.setFreq(value[10]);
  L1A = value[11];
  // Vol = Vol + lfo.next();
  // Serial.print("                  ");  //func value
  // Serial.println(lfo.next());          //func value


  switch (Wave) {
    default:
      aSin.setFreq(Pitch);  //设置频率  // aSin.setFreq(analogRead(0));
      break;
    case 1:
      aTra.setFreq(Pitch);  //设置频率  // aSin.setFreq(analogRead(0));
      break;
    case 2:
      aSqu.setFreq(Pitch);
      break;
    case 3:
      aSaw.setFreq(Pitch);
      break;
    case 4:
      aPha.setFreq(Pitch);
      break;
    case 5:
      aHSin.setFreq(Pitch);
      break;
    case 6:
      aCheb.setFreq(Pitch);
      break;
    case 7:
      aNos.setFreq(Pitch);
      break;
  }
}

int updateAudio() {
  // return aSin.next()  << 6;  // 8 bits scaled up to 14 bits
  Q15n16 vibrato = (Q15n16)L1A * lfo.next();
  switch (Wave) {
    default:
      return (aSin.next() * Vol) >> 8;  // return an int signal centred around 0
    case 1:
      return (aTra.next() * Vol) >> 8;
    case 2:
      return (aSqu.next() * Vol) >> 8;
    case 3:
      return (aSaw.next() * Vol) >> 8;
    case 4:
      return (aPha.next() * Vol) >> 8;
    case 5:
      return (aHSin.next() * Vol) >> 8;
    case 6:
      return (aCheb.next() * Vol) >> 8;
    case 7:
      return (aNos.next() * Vol) >> 8;
  }
}

int btnHover = 0;    //按下事件判断
int btnTime = 0;     //长按事件判断
int knobEnable = 0;  //旋钮事件允许
void getCtrl() {
  Serial.println(digitalRead(12));  //btn1
  Serial.println(digitalRead(11));  //btn2
  // Serial.println(analogRead(0));                         //knob
  Serial.println(function[position] + value[position]);  //func value
  Serial.println("                       ");

  //按下事件
  if (digitalRead(12) == 0) {
    btnHover = 1;
    btnTime++;
  }
  //抬起事件
  if (digitalRead(12) == 1 && btnHover == 1) {
    //长按按钮事件
    if (btnTime > 50) {
      position = 0;
      Serial.println("anxia aaa");  //knob
    }
    //短按按钮事件
    else {
      if (FUNCTION_LENGTH - 1 <= position) {
        position = -1;
      }
      position++;
      Serial.println("tnxa tttt");
    }
    btnHover = 0;
    btnTime = 0;
    knobEnable = 0;
  }
  //旋钮事件
  int knob_dec = analogRead(0) - value[position];  //检测旋钮进入原参数范围
  if (-KNOB_CHANGE_RANGE < knob_dec && knob_dec < KNOB_CHANGE_RANGE) {
    knobEnable = 1;
  }
  if (knobEnable == 1) {  //进入范围后 则可以调节当前参数
    value[position] = analogRead(0);
  }
}

//这里实时音频处理 尽量不要额外的事情
void loop() {
  audioHook();  // required here
}